from email.utils import decode_rfc2231
import os
from sys import path
import time
from pyspark import Row

from pyspark.sql import SparkSession
from pyspark.sql.functions import to_json, input_file_name, current_timestamp
from pyspark.sql.types import BooleanType, StringType

from models.datasource import Datasource
from models.format_log_entry import FormatLogEntry

from process import Process
from utils.properties_parser import parse_properties


class ExploitationZoneProcess(Process):
    _log_collection_name = 'formatLog'

    def __init__(self):
        self.properties_db = {
            "user": parse_properties('monetdb')['database.user'],
            "password": parse_properties('monetdb')['database.password'],
            "driver": "org.monetdb.jdbc.MonetDriver",
            "batchsize": 10000
        }
        super().__init__()
    
    def run_process(self):
        self._top_listings_per_neighborhood()
    
    def _top_listings_per_neighborhood(self):
        spark = SparkSession.builder.master("local[*]").appName("top_listings_per_neighborhood").config('spark.driver.extraClassPath',
                './drivers/monetdb-jdbc-3.2.jre8.jar').getOrCreate()
        df = spark.read.format('jdbc').options(url=f"jdbc:monetdb://{parse_properties('monetdb')['database.host']}:50000/mydb", dbtable='idealista', **self.properties_db).load()
        
        df = df.select('district_n_reconciled', 'district_id', 'neighborhood_n_reconciled', 'neighborhood_id')
        
        # Conver to RDD just to learn
        rdd = df.rdd.map(lambda entry: (entry.neighborhood_id, (entry.district_id, entry.district_n_reconciled, entry.neighborhood_n_reconciled, 1)))
        rdd = rdd.filter(lambda entry: entry[0] is not None)
        rdd = rdd.reduceByKey(lambda x, y: (x[0], x[1], x[2], x[3]+y[3]))

        # Converto to Dataframe to store to JDBC
        rdd = rdd.map(lambda entry: Row(neighborhood_id=entry[0], district_id=entry[1][0], district_n_reconciled=entry[1][1], 
                neighborhood_n_reconciled=entry[1][2], count_list=entry[1][3]))

        # To dataframe to store to JDBC
        rdd.toDF().write.format("jdbc").mode('overwrite').options(url=f"jdbc:monetdb://{parse_properties('monetdb')['database.host']}:50000/mydb", 
            dbtable='idealista_count_neighbors', **self.properties_db).save()


    
